<div id="<%= viewName %>">
	<!-- Content Header (Page header) -->
	<section class="content-header">
		<div class="container-fluid">
			<div class="row mb-2">
				<div class="col-sm-6">
				<h1>Estadisticas</h1>
				</div>
				<div class="col-sm-6">
					<ol class="breadcrumb float-sm-right">
						<li class="breadcrumb-item active">
							<div class="input-group">
								<input type="text" id="datepicker" disabled value="dd-mm-aaaa" class="form-control rounded-0" style="width: 120px;">
								<span class="input-group-append">
									<button type="button" id="BtnDatepicker" class="btn btn-block btn-warning btn-flat float-right" id="daterange-btn">
										<i class="far fa-calendar-alt"></i> Seleccionar fecha
									</button>
								</span>
							</div>
						</li>
					</ol>
				</div>
			</div>
		</div><!-- /.container-fluid -->
	</section>
	<section id="historical_contend" class="content">
		<div class="container-fluid">
			<div class="row">

				<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
					<div class="card card-outline card-dark">
						<div class="card-header">
							<h3 class="card-title">Máximo reportados</h3>
						</div><!-- /.card header -->
						<div class="card-body">
							<div class="card-grid-values">
								<p>Voltaje en F1</p>
								<p>Voltaje en F2</p>
								<h1 class="card-value-volt" id="maxVoltF1">0</h1>
								<h1 class="card-value-volt" id="maxVoltF2">0</h1>
								
								<p>Corriente en F1</p>
								<p>Corriente en F2</p>
								<h1 class="card-value-amp" id="maxCurrentF1">0</h1>
								<h1 class="card-value-amp" id="maxCurrentF2">0</h1>
								
								<p>Potencia total</p>
								<p>Porcentaje de batería</p>
								<h1 class="card-value-power" id="maxPower">0</h1>
								<h1 class="card-value-battery" id="maxBattery">0</h1>
							</div><!-- /.card grid values-->
						</div><!-- /.card body -->
						<div class="overlay dark" id="maxCardOverlay">
							<i class="fas fa-2x fa-sync-alt fa-spin"></i>
						</div>
					</div><!-- /.card -->
				</div><!-- /.col -->

				<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
					<div class="card card-outline card-dark">
						<div class="card-header">
							<h3 class="card-title">Mínimo reportados</h3>
						</div><!-- /.card header -->
						<div class="card-body">
							<div class="card-grid-values">
								<p>Voltaje en F1</p>
								<p>Voltaje en F2</p>
								<h1 class="card-value-volt" id="minVoltF1">0</h1>
								<h1 class="card-value-volt" id="minVoltF2">0</h1>
								
								<p>Corriente en F1</p>
								<p>Corriente en F2</p>
								<h1 class="card-value-amp" id="minCurrentF1">0</h1>
								<h1 class="card-value-amp" id="minCurrentF2">0</h1>
								
								<p>Potencia total</p>
								<p>Porcentaje de batería</p>
								<h1 class="card-value-power" id="minPower">0</h1>
								<h1 class="card-value-battery" id="minBattery">0</h1>
							</div><!-- /.card grid values-->
						</div><!-- /.card body -->
						<div class="overlay dark" id="minCardOverlay">
							<i class="fas fa-2x fa-sync-alt fa-spin"></i>
						</div>
					</div><!-- /.card -->
				</div><!-- /.col -->

				<div class="col-12">
					<div class="card card-outline card-dark">
						<div class="card-header">
							<h5 class="card-title">Resumen de consumo</h5>
						</div><!-- /.card-header -->
						<div class="card-body p-0">
							<div id="powersChart"></div><!-- /.chart-responsive -->
						</div>
						<div class="overlay dark" id="powerCardOverlay">
							<i class="fas fa-2x fa-sync-alt fa-spin"></i>
						</div>
					</div>
				</div>

				<div class="col-12">
					<div class="card card-outline card-dark">
						<div class="card-header">
							<h5 class="card-title">Resumen de batería</h5>
						</div><!-- /.card-header -->
						<div class="card-body p-0">
							<div id="batteryChart"></div><!-- /.chart-responsive -->
						</div>
						<div class="overlay dark" id="batteryCardOverlay">
							<i class="fas fa-2x fa-sync-alt fa-spin"></i>
						</div>
					</div>
				</div>

				<div class="col-12">
					<div class="card card-outline card-dark">
						<div class="card-header">
							<h5 class="card-title">Resumen de los últimos 7 días</h5>
						</div><!-- /.card-header -->
						<div class="card-body p-0">
							<div id="weekChart"></div><!-- /.chart-responsive -->
						</div>
						<div class="overlay dark" id="weekCardOverlay">
							<i class="fas fa-2x fa-sync-alt fa-spin"></i>
						</div>
					</div>
				</div>

			</div>
		</div><!-- /.container-fluid -->
	</section>
	<script>
		(function () {

			function loadStarted() {
				document.getElementById("maxCardOverlay").style.display = "flex";
				document.getElementById("minCardOverlay").style.display = "flex";
				document.getElementById("powerCardOverlay").style.display = "flex";
				document.getElementById("batteryCardOverlay").style.display = "flex";
			}

			function loadFinished() {
				document.getElementById("maxCardOverlay").style.display = "none";
				document.getElementById("minCardOverlay").style.display = "none";
				document.getElementById("powerCardOverlay").style.display = "none";
				document.getElementById("batteryCardOverlay").style.display = "none";
			}

			function loadWeekStarted() {
				document.getElementById("weekCardOverlay").style.display = "flex";
			}

			function loadWeekFinished() {
				document.getElementById("weekCardOverlay").style.display = "none";
			}

			let powersChartConfig = {
				exporting: {
					enabled: false
				},
				title: {
					text: null
				},
				chart: {
					type: 'column'
				},
				subtitle: {
					text: 'Potencia total consumida por cada hora del día en W'
				},
				xAxis: {
					title: {
						text: 'Horas del día'
					},
					categories: [
						'12 a.m', 
						'1 a.m', 
						'2 a.m', 
						'3 a.m', 
						'4 a.m', 
						'5 a.m', 
						'6 a.m', 
						'7 a.m', 
						'8 a.m', 
						'9 a.m', 
						'10 a.m', 
						'11 a.m', 
						'12 p.m', 
						'1 p.m', 
						'2 p.m', 
						'3 p.m', 
						'4 p.m', 
						'5 p.m', 
						'6 p.m', 
						'7 p.m', 
						'8 p.m', 
						'9 p.m', 
						'10 p.m', 
						'11 p.m'
					]
				},
				yAxis: {
					lineWidth: 1,
					title: {
						text: null
					},
					labels: {
						format: '{value}'
					}
				},
				credits: {
					enabled: false
				},
				legend: {
					enabled: false
				},
				plotOptions: {
					series: {
						borderWidth: 0
					}
				},
				tooltip: {
					formatter: () => {
						return '<span style="font-size:14px"><b>Consumo</b></span><br>' + 
						'<span>' + this.x + '</span>: ' + this.y + this.point.series.name;
					}
				},
				series: [{
					name: "Wh",
					data: (function () {
						let data = [];
						for (let index = 0; index < 24; index++) {
							data.push(0);
						}
						return data;
					}())
				}]
			};
			
			let batteryChartConfig = {
				exporting: {
					enabled: false
				},
				title: {
					text: null
				},
				chart: {
					type: 'column'
				},
				subtitle: {
					text: 'Porcentaje de bateria por cada hora del día'
				},
				xAxis: {
					title: {
						text: 'Horas del día'
					},
					categories: [
						'12 a.m', 
						'1 a.m', 
						'2 a.m', 
						'3 a.m', 
						'4 a.m', 
						'5 a.m', 
						'6 a.m', 
						'7 a.m', 
						'8 a.m', 
						'9 a.m', 
						'10 a.m', 
						'11 a.m', 
						'12 p.m', 
						'1 p.m', 
						'2 p.m', 
						'3 p.m', 
						'4 p.m', 
						'5 p.m', 
						'6 p.m', 
						'7 p.m', 
						'8 p.m', 
						'9 p.m', 
						'10 p.m', 
						'11 p.m'
					]
				},
				yAxis: {
					lineWidth: 1,
					title: {
						text: null
					},
					labels: {
						format: '{value}'
					},
				},
				credits: {
					enabled: false
				},
				legend: {
					enabled: false
				},
				plotOptions: {
					series: {
						borderWidth: 0
					}
				},
				tooltip: {
					formatter: () => {
						return '<span style="font-size:14px"><b>Batería</b></span><br>' + 
						'<span>' + this.x + '</span>: ' + this.y + this.point.series.name;
					}
				},
				series: [{
					name: "%",
					
					data: (function () {
						let data = [];
						for (let index = 0; index < 24; index++) {
							data.push(0);
						}
						return data;
					}())
				}]
			};
			
			let weekChartConfig = {
				lang: {
					drillUpText: 'Volver a consumos'
				},
				exporting: {
					enabled: false
				},
				chart: {
					type: 'column'
				},
				title: {
					text: null
				},
				subtitle: {
					text: 'Potencia total consumida por cada día y hora en W'
				},
				accessibility: {
					announceNewData: {
						enabled: false
					}
				},
				xAxis: {
					title: {
						text: 'Últimos 7 días'
					},
					type: 'category'
				},
				yAxis: {
					lineWidth: 1,
					title: {
						text: null
					},
				},
				credits: {
					enabled: false
				},
				legend: {
					enabled: false
				},
				plotOptions: {
					series: {
						borderWidth: 0
					}
				},

				tooltip: {
					formatter: () => {
						return '<span style="font-size:14px"><b>Consumo</b></span><br>' + 
						'<span>' + this.point.name + '</span>: ' + this.y + this.point.series.name;
					}
				},

				series: [{
					name: "kWh",
					colorByPoint: false,
					data: (function () {
						
						let data = [];
						
						for (let i = 6; i >= 0; i--) {

							const unix = new Date().getTime() - (86400000 * i);
							const d = new Date(unix);

							let serie = {
								name: "Día " + d.getDate(),
								y: parseFloat(getRandomFloat(8, 9)),
								drilldown: "" + d.getDate()
							}
							data.push(serie);
						}
						return data;
					}())
				}],
				drilldown: {
					activeAxisLabelStyle: {
						textDecoration: 'none',
						fontStyle: 'italic'
					},
					activeDataLabelStyle: {
						textDecoration: 'none',
						fontStyle: 'italic'
					},
					series: 
					(function () {
						
						let series = [];
						for (let i = 6; i >= 0; i--) {

							const unix = new Date().getTime() - (86400000 * i);
							const d = new Date(unix);

							let serie = {
								name: "Wh",
								id: "" + d.getDate(),
								data: (function () {
									let data = [];
									let hours = ['12 a.m', '1 a.m', '2 a.m', '3 a.m', '4 a.m', '5 a.m', '6 a.m', '7 a.m', '8 a.m', '9 a.m', '10 a.m', '11 a.m', '12 p.m', '1 p.m', '2 p.m', '3 p.m', '4 p.m', '5 p.m', '6 p.m', '7 p.m', '8 p.m', '9 p.m', '10 p.m', '11 p.m']
									for (let j = 0; j < 24; j++) {
										let v = [
											hours[j],
											parseFloat(getRandomInt(300, 400))
										];
										data.push(v);
									}
									return data;
								}())
							}
							series.push(serie);
						}
						return series;
					}())
				}
			};

			let powersChart = Highcharts.chart('powersChart', powersChartConfig);
			let batteryChart = Highcharts.chart('batteryChart', batteryChartConfig);
			let weekChart = Highcharts.chart('weekChart', weekChartConfig);

			function updateCharts(res) {

				let v1Min = 0;
				let v1Max = 0;
				let v2Min = 0;
				let v2Max = 0;

				let a1Min = 0;
				let a1Max = 0;
				let a2Min = 0;
				let a2Max = 0;

				let pMin = 0;
				let pMax = 0;

				let bMin = 0;
				let bMax = 0;

				let powerDataArray = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				let bateryDataArray = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				let bateryHourCount = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

				if (res.length > 0 ) {
					
					for (let i = 0; i < res.length; i++) {
						const elem = res[i];
						const data = JSON.parse(elem.data);

						const v1 = parseFloat(data.v1);
						const v2 = parseFloat(data.v2);
						const a1 = parseFloat(data.a1);
						const a2 = parseFloat(data.a2);
						const p  = parseInt(data.p1) + parseInt(data.p2);
						let	  b  = parseFloat(data.b);

						const pc1 = parseFloat(data.pc1);
						const pc2 = parseFloat(data.pc2);
						const tPC = (pc1 + pc2);

						if (b >= 44) {
							b = Math.round((100 / 9) * (b - 44));
						} else { b = 0; }

						if (v1Max < v1) { v1Max = v1; }
						if (v2Max < v2) { v2Max = v2; }
						if (a1Max < a1) { a1Max = a1; }
						if (a2Max < a2) { a2Max = a2; }
						if (pMax < p) { pMax = p; }
						if (bMax < b) { bMax = b; }

						if (v1Min > v1 || v1Min == 0) { v1Min = v1; }
						if (v2Min > v2 || v2Min == 0) { v2Min = v2; }
						if (a1Min > a1 || a1Min == 0) { a1Min = a1; }
						if (a2Min > a2 || a2Min == 0) { a2Min = a2; }
						if (pMin > p || pMin == 0) { pMin = p; }
						if (bMin > b || bMin == 0) { bMin = b; }

						const reg = new Date(elem.registerDate);
						const hour = reg.getHours();

						powerDataArray[hour] += tPC;

						bateryHourCount[hour] += 1;
						bateryDataArray[hour] += parseInt(b);
					}

					document.getElementById("minVoltF1").innerHTML = v1Min;
					document.getElementById("minVoltF2").innerHTML = v2Min;
					document.getElementById("minCurrentF1").innerHTML = a1Min;
					document.getElementById("minCurrentF2").innerHTML = a2Min;
					document.getElementById("minPower").innerHTML = pMin;
					document.getElementById("minBattery").innerHTML = bMin;

					document.getElementById("maxVoltF1").innerHTML = v1Max;
					document.getElementById("maxVoltF2").innerHTML = v2Max;
					document.getElementById("maxCurrentF1").innerHTML = a1Max;
					document.getElementById("maxCurrentF2").innerHTML = a2Max;
					document.getElementById("maxPower").innerHTML = pMax;
					document.getElementById("maxBattery").innerHTML = bMax;

					powersChart.update({
						series: [{
							data: (function () {
								let data = [];
								for (let i = 0; i < 24; i++) {
									data.push(Math.round(powerDataArray[i]));
								}
								return data;
							}())
						}]
					});

					batteryChart.update({
						series: [{
							data: (function () {
								let data = [];
								for (let i = 0; i < 24; i++) {
									if (bateryHourCount[i] > 0) {
										data.push(Math.round(bateryDataArray[i] / bateryHourCount[i]));
									} else {
										data.push(0);
									}
								}
								console.log(data);
								return data;
							}())
						}]
					});

				} else {
					alert("No se encontraron datos para el día seleccionado.");
				}

				loadFinished();
			}

			function updateWeekChart(response) {
				loadWeekFinished();
			}

			function loadDataFromServer(unix) {
				unix *= 1000
				unix ;
				let unixMin = unix - 18000000;
				let unixmax = unixMin + 86399999;
				let url = "../data/" + unixMin + "/" + unixmax;
				try {
					$.post(url, {},
					function(response, status){
						updateCharts(response);
					});
				} catch (error) {
					console.log(error);
				}
			}

			function loadWeekDataFromServer() {
				updateWeekChart();
			}

			loadWeekStarted();
			loadWeekDataFromServer();

			let BtnDatepicker = document.getElementById("BtnDatepicker");
			let datepicker = MCDatepicker.create({
				el: '#datepicker',
				customWeekDays: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
				customMonths: [
					'Enero',
					'Febrero',
					'Marzo',
					'Abril',
					'Mayo',
					'Junio',
					'Julio',
					'Agosto',
					'Septiembre',
					'Octubre',
					'Noviembre',
					'Diciembre'
				],
				context: document.body,
				autoClose: true,
				closeOndblclick: true,
				closeOnBlur: false,
				customOkBTN: '',
				customClearBTN: '',
				customCancelBTN: 'Cancelar',
				firstWeekday: 1,
				showCalendarDisplay: false,
				selectedDate: new Date(),
				minDate: new Date(2021, 9, 10),
				maxDate: new Date(),
				jumpToMinMax: true,
				jumpOverDisabled: true,
				theme: {
					theme_color: '#8f96a3',
					active_text_color: '#28a745',
					display: {
						foreground: 'rgba(255, 255, 255, 0.8)',
						background: '#5e636e'
					},
					picker: {
						background: '#343a40'
					},
					picker_header: {
						active: 'rgba(255, 255, 255, 0.8)',
						inactive: 'rgba(255, 255, 255, 0.1)'
					},
					weekday: {
						foreground: 'rgba(255, 255, 255, 0.8)'
					},
					button: {
						success: {
								foreground: '#e65151'
						},
						danger: {
								foreground: '#ffc107'
						}
					},
					date: {
						active: {
							default: {
								foreground: 'rgba(255, 255, 255, 0.8)'
							},
							picked: {
								foreground: '#ffffff',
								background: '#8f96a3'
							},
							today: {
								foreground: 'rgba(255, 255, 255, 0.8)',
								background: '#2f3237'
							}
						},
						inactive: {
							default: {
								foreground: 'rgba(255, 255, 255, 0.1)'
							}
						},
						marcked: {
							foreground: '#38ada9'
						}
					},
					month_year_preview: {
						active: {
							default: {
								foreground: 'rgba(255, 255, 255, 0.8)'
							},
							picked: {
								foreground: '#ffffff',
								background: '#8f96a3'
							}
						},
						inactive: {
							default: {
								foreground: 'rgba(255, 255, 255, 0.1)'
							}
						}
					}
				},
				//disableDates: [], // ex: [new Date(2019,11, 25), new Date(2019, 11, 26)]
			});
			datepicker.open();
			datepicker.onClear(() => {
				datepicker.close();
			});

			BtnDatepicker.onclick = () => {
				datepicker.open();
			}

			let dateSelected = false;
			datepicker.onSelect((date, formatedDate) => {
				dateSelected = true;
				let unix = date.getTime() / 1000;
				loadStarted();
				loadDataFromServer(unix);
			});

			let view = document.getElementById("<%= viewName %>");
			view.addEventListener("OnVisible", () => {
				if (!dateSelected) {
					datepicker.open();
				}
			});
			view.addEventListener("OnInvisible", () => {
				datepicker.close();
			});

		})();
	</script>
</div>