<div id="<%= viewName %>">
	<!-- Content Header (Page header) -->
	<section class="content-header">
		<div class="container-fluid">
			<div class="row mb-2">
				<div class="col-sm-6">
					<h1>Tablero</h1>
				</div><!-- /.col -->
				<div class="col-sm-6">
					<ol class="breadcrumb float-sm-right">
						<li id="tablerodevicenameli" class="breadcrumb-item active"></li>
					</ol>
				</div><!-- /.col -->
			</div><!-- /.row -->
		</div><!-- /.container-fluid -->
	</section><!-- /.content-header -->

	<!-- Main content -->
	<section id="dashboard_contend" class="content">
		<div class="container-fluid">
			<div class="row">

				<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
					<div class="card card-outline card-dark">
						<div class="card-header">
							<div class="d-flex justify-content-between">
								<h3 class="card-title">Conecciones y distribuciones</h3>
							</div>
						</div><!-- /.card header -->
						<div class="card-body">
							<div class="d-flex justify-content-center chart">
								<svg id="connectionChart" width="320" height="320" version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>
							</div>
						</div><!-- /.card body -->
						<div class="overlay dark" id="DistOverlay" style="display: flex;">
							<h3 class="text-bold text-center text-light bg-dark p-4">Dispositivo desconectado</h3>
						</div>
					</div><!-- /.card -->
				</div><!-- /.col -->

				<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
					<div class="card card-outline card-dark">
						<div class="card-header">
							<h3 class="card-title">Información general</h3>
						</div><!-- /.card header -->
						<div class="card-body">
							<div class="card-grid-values">
								<p>Voltaje en F1</p>
								<p>Voltaje en F2</p>
								<h1 class="card-value-volt" id="voltF1">0</h1>
								<h1 class="card-value-volt" id="voltF2">0</h1>
								
								<p>Corriente en F1</p>
								<p>Corriente en F2</p>
								<h1 class="card-value-amp" id="currentF1">0</h1>
								<h1 class="card-value-amp" id="currentF2">0</h1>
								
								<p>Frecuencia en fases</p>
								<p>Estado actual</p>
								<h1 class="card-value-fre" id="freq">0</h1>
								<label class="switchBtn">
										<input type="checkbox" id="control" onclick="controlClick()">
										<div class="slide" id="controlTitle">- - - - - -</div>
								</label>
							</div><!-- /.card grid values-->
						</div><!-- /.card body -->
						<div class="overlay dark" id="ValuesOverlay" style="display: flex;">
							<h3 class="text-bold text-center text-light bg-dark p-4">Dispositivo desconectado</h3>
						</div>
					</div><!-- /.card -->
				</div><!-- /.col -->

				<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
					<div class="card card-outline card-dark">
						<div class="card-header">
							<h5 class="card-title">Nivel de carga en F1</h5>
						</div> <!-- /.card-header -->
						<div class="card-body d-flex justify-content-center">
							<div id="LoadF1" class="gauge"></div><!-- /.chart-responsive -->
						</div>
						<div class="overlay dark" id="LoadF1Overlay" style="display: flex;">
							<h3 class="text-bold text-center text-light bg-dark p-4">Dispositivo desconectado</h3>
						</div>
					</div> <!-- /.card -->
				</div><!-- /.col -->

				<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
					<div class="card card-outline card-dark">
						<div class="card-header">
							<h5 class="card-title">Nivel de carga en F2</h5>
						</div><!-- /.card-header -->
						<div class="card-body d-flex justify-content-center">
							<div id="LoadF2" class="gauge"></div><!-- /.chart-responsive -->
						</div><!-- /.card body -->
						<div class="overlay dark" id="LoadF2Overlay" style="display: flex;">
							<h3 class="text-bold text-center text-light bg-dark p-4">Dispositivo desconectado</h3>
						</div>
					</div><!-- /.card -->
				</div><!-- /.col -->

				<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
					<div class="card card-outline card-dark">
						<div class="card-header">
							<h5 class="card-title">Potencia en F1</h5>
						</div><!-- /.card-header -->
						<div class=" card-body p-0">
							<div id="WattsF1"></div>
						</div><!-- /.card body -->
						<div class="overlay dark" id="PowerF1Overlay" style="display: flex;">
							<h3 class="text-bold text-center text-light bg-dark p-4">Dispositivo desconectado</h3>
						</div>
					</div><!-- /.card -->
				</div><!-- /.col -->

				<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
					<div class="card card-outline card-dark">
						<div class="card-header">
							<h5 class="card-title">Potencia en F2</h5>
						</div><!-- /.card-header -->
						<div class="card-body p-0">
							<div id="WattsF2"></div><!-- /.chart-responsive -->
						</div><!-- /.card body -->
						<div class="overlay dark" id="PowerF2Overlay" style="display: flex;">
							<h3 class="text-bold text-center text-light bg-dark p-4">Dispositivo desconectado</h3>
						</div>
					</div><!-- /.card -->
				</div><!-- /.col -->

			</div><!-- /.row -->
		</div><!-- /.container-fluid -->
	</section><!-- /.content -->

	<script type="text/javascript">

		let voltF1 = document.getElementById("voltF1");
		let voltF2 = document.getElementById("voltF2");

		let currentF1 = document.getElementById("currentF1");
		let currentF2 = document.getElementById("currentF2");

		let Freq = document.getElementById("freq");

		let controlSwitch = document.getElementById("control");
		let controlTitle = document.getElementById("controlTitle");

		let changeState = true; // Se debe cambiar el valor a true para permitir cambiar nuevamente

		function controlClick() {

			try {
				
				let send = {};
				changeState = false;
				controlSwitch.disabled = true;
				if (!controlSwitch.checked) {
					controlTitle.innerHTML = "Encendid";
					controlTitle.style.backgroundColor = "#28a745";
					send = {
						control: 1
					}
				} else {
					controlTitle.innerHTML = "Apagado";
					controlTitle.style.backgroundColor = "#dc3545";
					send = {
						control: 0
					}
				}

				connection.send(JSON.stringify(send));
				toastr.info('Enviando orden.');

			} catch (error) {
				console.log(error);
			}
		}

		function controlState(state) {
			if (changeState) {
				if (state == "on") {
					controlTitle.innerHTML = "Encendid";
					controlTitle.style.backgroundColor = "#28a745";
					controlSwitch.checked = false;
					controlSwitch.disabled = false;
				} else if (state == "off") {
					controlTitle.innerHTML = "Apagado";
					controlTitle.style.backgroundColor = "#dc3545";
					controlSwitch.checked = true;
					controlSwitch.disabled = false;
				} else {
					controlTitle.innerHTML = "- - - - - -";
					controlTitle.style.backgroundColor = "gray";
					controlSwitch.disabled = true;
				}
			}
		}

		let connectGraphNodes = [
			{
				name : 'panel',
				color : "#616161",
				image : "../images/pv.svg",
				gauge : 1,
				position : {
					x : 80,
					y : 80
				},
				connection : {
					x : 50,
					y : 50
				}
			},{
				name : 'bateria',
				color : "#616161",
				image : "../images/battery.svg",
				gauge : 1,
				position : {
					x : 50,
					y : 50
				},
				connection : {
					x : 20,
					y : 20
				}
			},{
				name : 'inversor',
				color : "#616161",
				image : "../images/inverter.svg",
				gauge : 1,
				position : {
					x : 20,
					y : 20
				},
				connection : {
					x : 80,
					y : 20
				}
			},{
				name : 'red',
				color : "#616161",
				image : "../images/grid.svg",
				gauge : 0,
				position : {
					x : 20,
					y : 80
				},
				connection : {
					x : 20,
					y : 20
				}
			},{
				name : 'carga',
				color : "#616161",
				image : "../images/consumption.svg",
				gauge : 0,
				position : {
					x : 80,
					y : 20
				},
			}
		]
		let graphic = ConnectionGraph.chart("connectionChart", connectGraphNodes);
		
		let wattsF1Config = {
			time: {
				useUTC: false
			},
			credits: {
				enabled: false
			},
			rangeSelector: {
				buttons: [{
					count: 1,
					type: 'minute',
					text: '1 M'
				}, {
					count: 5,
					type: 'minute',
					text: '5 M'
				}, {
					count: 10,
					type: 'minute',
					text: '10 M'
				}],
				inputEnabled: false,
				selected: 0
			},
			exporting: {
				enabled: false
			},
			xAxis: {
				type: 'datetime'
			},
			yAxis: {
				title: {
					text: ''
				},
				plotLines: [{
					value: 75,
					color: 'red',
					dashStyle: 'shortdash',
					width: 2,
					label: { text: 'Limite de consumo maximo' }
				}, {
					value: 50,
					color: 'yellow',
					dashStyle: 'shortdash',
					width: 2,
					label: { text: 'Última mitad hasta maximo' }
				}]
			},
			series: [{
				name: 'Potencia en F1',
				type: 'area',
				threshold: null,
				fillColor: {
					linearGradient: {
						x1: 0,
						y1: 0,
						x2: 0,
						y2: 1
					},
					stops: [
						[0, Highcharts.getOptions().colors[0]],
						[1, Highcharts.color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
					]
				},
				data: (function () {
					// generate an array of random data
					let data = [];
					let time = Date.now();
					let i;

					for (i = -600; i <= 0; i += 5) {
						data.push([
							time + (i * 1000),
							0
						]);
					}
					return data;
				}())
			}],
			responsive: {
				rules: [{
					condition: {
						maxWidth: 500
					},
					chartOptions: {
						chart: {
							height: 300
						},
						subtitle: {
							text: null
						},
						navigator: {
							enabled: false
						}
					}
				}]
			}
		}
		let wattsF1 = Highcharts.stockChart('WattsF1', wattsF1Config);

		let wattsF2Config =  {
			time: {
				useUTC: false
			},
			credits: {
				enabled: false
			},
			rangeSelector: {
				buttons: [{
					count: 1,
					type: 'minute',
					text: '1 M'
				}, {
					count: 5,
					type: 'minute',
					text: '5 M'
				}, {
					count: 10,
					type: 'minute',
					text: '10 M'
				}],
				inputEnabled: false,
				selected: 0
			},
			exporting: {
				enabled: false
			},
			xAxis: {
				type: 'datetime'
			},
			yAxis: {
				title: {
					text: null
				},
				plotLines: [{
					value: 75,
					color: 'red',
					dashStyle: 'shortdash',
					width: 2,
					label: { text: 'Limite de consumo maximo' }
				}, {
					value: 50,
					color: 'yellow',
					dashStyle: 'shortdash',
					width: 2,
					label: { text: 'Última mitad hasta maximo' }
				}]
			},
			series: [{
				name: 'Potencia en F2',
				type: 'area',
				threshold: null,
				fillColor: {
					linearGradient: {
						x1: 0,
						y1: 0,
						x2: 0,
						y2: 1
					},
					stops: [
						[0, Highcharts.getOptions().colors[0]],
						[1, Highcharts.color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
					]
				},
				data: (function () {
					// generate an array of random data
					let data = [];
					let time = Date.now();
					let i;

					for (i = -600; i <= 0; i += 5) {
						data.push([
							time + (i * 1000),
							0
						]);
					}
					return data;
				}())
			}],
			responsive: {
				rules: [{
					condition: {
						maxWidth: 500
					},
					chartOptions: {
						chart: {
							height: 300
						},
						subtitle: {
							text: null
						},
						navigator: {
							enabled: false
						}
					}
				}]
			}
		};
		let wattsF2 = Highcharts.stockChart('WattsF2', wattsF2Config);

		let gaugeLoadOptions = {
			chart: {
				type: 'solidgauge'
			},
			title: null,
			pane: {
				center: ['50%', '85%'],
				size: '140%',
				startAngle: -90,
				endAngle: 90,
				background: {
					backgroundColor: Highcharts.defaultOptions.legend.backgroundColor || '#EEE',
					innerRadius: '60%',
					outerRadius: '100%',
					shape: 'arc'
				}
			},
			tooltip: {
				enabled: false
			},
			// the value axis
			yAxis: {
				stops: [
					[0.1, '#55BF3B'], // green
					[0.8, '#DDDF0D'], // yellow
					[0.9, '#DF5353'] // red
				],
				lineWidth: 0,
				minorTickInterval: null,
				tickAmount: 2,
				title: {
					y: -70
				},
				labels: {
					y: 16
				}
			},
			plotOptions: {
				solidgauge: {
					dataLabels: {
						y: 5,
						borderWidth: 0,
						useHTML: true
					}
				}
			}
		};
		let loadF1 = Highcharts.chart('LoadF1', Highcharts.merge(gaugeLoadOptions, {
			exporting: {
				enabled: false
			},
			yAxis: {
				min: 0,
				max: 100,
			},
			credits: {
				enabled: false
			},
			series: [{
				name: 'Carga F1',
				data: [0],
				dataLabels: {
					format: 
					'<span class="gauge-unit">{y}</span><br/>'+
					'<span style="font-size:12px;opacity:0">%</span>'
				},
				tooltip: {
					valueSuffix: ' %'
				}
			}]
		}));
		let loadF2 = Highcharts.chart('LoadF2', Highcharts.merge(gaugeLoadOptions, {
			exporting: {
				enabled: false
			},
			yAxis: {
				min: 0,
				max: 100,
			},
			credits: {
				enabled: false
			},
			series: [{
				name: 'Carga F2',
				data: [0],
				dataLabels: {
					format: 
					'<span class="gauge-unit" style="font-size:25px">{y}</span><br/>'+
					'<span style="font-size:12px;opacity:0">%</span>'
				},
				tooltip: {
					valueSuffix: ' %'
				}
			}]
		}));

		function changeOverlay(value) {
			document.getElementById("DistOverlay").style.display = value;
			document.getElementById("ValuesOverlay").style.display = value;
			document.getElementById("LoadF1Overlay").style.display = value;
			document.getElementById("LoadF2Overlay").style.display = value;
			document.getElementById("PowerF1Overlay").style.display = value;
			document.getElementById("PowerF2Overlay").style.display = value;
		}

		let timeOut;
		// Contador para indicar dispositivo desconectado
		function offLine() {

			changeOverlay('flex');

			controlState("NaN");

			voltF1.innerHTML = '0';
			voltF2.innerHTML = '0';
			currentF1.innerHTML = '0';
			currentF2.innerHTML = '0';

			Freq.innerHTML = '0';

			if (loadF1) {
				let point = loadF1.series[0].points[0];
				point.update(0);
			}

			if (loadF2) {
				let point = loadF2.series[0].points[0];
				point.update(0);
			}

			//c = "#00c853"; Verde
			//c = "#9e9e9e"; Gris
			//c = "#616161"; Gris oscuro
			//c = "#d50000"; Rojo
			// id valor direccion color-circulos radio-circulos color-centro
			// stop circles animation / direccion = -1
			graphic.updateNode(0, 0, -1, "#9e9e9e", 70);  // Panel a bateria
			graphic.updateNode(1, 0, -1, "#9e9e9e", 70);  // bateria a inversor
			graphic.updateNode(2, 0, -1, "#9e9e9e", 70, "#616161");  // Inversor a carga
			graphic.updateNode(3, 0, -1, "#9e9e9e", 70);// red a inversor
		}

		function onLineReset() {
			clearTimeout(timeOut);
		}

		function offLineCount() {
			timeOut = setTimeout(() => {
				offLine();
			}, 15000);
		}
		offLineCount();

		function DeviceDataProcess (data) {

			onLineReset();
			offLineCount();
			changeOverlay('none');

			if (!changeState) {
				toastr.success('Orden confirmada.');
			}
			changeState = true; // se cambia a verdadero para permitir controlar de nuevo

			if (data.is == 1) {
				controlState("on");
			} else {
				controlState("off");
			}

			voltF1.innerHTML = data.v1;
			voltF2.innerHTML = data.v2;

			currentF1.innerHTML = data.a1;
			currentF2.innerHTML = data.a2;

			Freq.innerHTML = data.f;

			let loadp1 = Math.round((100/2500) * data.p1);
			let loadp2 = Math.round((100/2500) * data.p2);

			if (loadF1) {
				let point = loadF1.series[0].points[0];
				point.update(loadp1);
			}

			if (loadF2) {
				let point = loadF2.series[0].points[0];
				point.update(loadp2);
			}

			if (wattsF1) {
				let series = wattsF1.series[0];
				let x = Date.now();
				let y = parseInt(data.p1, 10);
				series.addPoint([x, y], true, true);
			}

			if (wattsF2) {
				let series = wattsF2.series[0];
				let x = Date.now();
				let y = parseInt(data.p2, 10);
				series.addPoint([x, y], true, true);
			}

			//c = "#00c853"; Verde
			//c = "#9e9e9e"; Gris
			//c = "#616161"; Gris oscuro
			//c = "#d50000"; Rojo
			// id valor direccion color-circulos radio-circulos color-centro
			// stop circles animation / direccion = -1

			let rPower = parseInt(data.rp);
			let prPower = ((100 / 2500) * rPower).toFixed(0); // Porcentaje de potencia regulador

			let tPower = parseInt(data.p1) + parseInt(data.p2);
			let piPower = ((100 / 5000) * tPower).toFixed(0); // Porcentaje de potencia inversor

			let bLevel = 0;
			let batery = parseFloat(data.b);

			let dbi = 1; //direccion bateria inversor

			if (data.rs == 1) {
				graphic.updateNode(0, prPower, 1, "#00c853", 70);  // Panel a bateria
			} else {
				graphic.updateNode(0, 0, -1, "#00c853", 70);  // Panel a bateria
			}

			if (data.is == 1) {
				graphic.updateNode(2, piPower, 1, "#00c853", 70, "#00c853");  // Inversor a carga
				graphic.updateNode(3, 0, -1, "#d50000", 70);// red a inversor

				dbi = 1;
			} else {
				graphic.updateNode(2, 0, 1, "#d50000", 70, "#d50000");  // Inversor a carga
				graphic.updateNode(3, 0, 1, "#d50000", 70);// red a inversor

				dbi = -1;
			}

			if (batery >= 44) {
				bLevel = ((100 / 9) * (batery - 44)).toFixed(0);
			} else {
				bLevel = 0;
			}
			graphic.updateNode(1, bLevel, dbi, "#00c853", 70);  // bateria a inversor
		}

		let wasConnected = false;
		let isConnected = false;
		function connect() {
			try {
				$.post("../authentication/user", {},
				function(response, status){
					if (status == 'success') {

						// if user is running mozilla then use it's built-in WebSocket
						window.WebSocket = window.WebSocket || window.MozWebSocket;
						if (window.WebSocket) {

							const hostname = "mqtt-leder.herokuapp.com";
							const port = 443;
							const clientId = "WebMQTT" + new Date().getUTCMilliseconds();
							const username = "testuser";
							const password = "testpass";
							const SubTopic = "8458167-A";
							const PubTopic = "8458167-B";

							mqttClient = new Paho.Client(hostname, port, clientId);
							mqttClient.onMessageArrived =  MessageArrived;
							mqttClient.onConnectionLost = ConnectionLost;

							/*Initiates a connection to the MQTT broker*/
							var options = {
								onSuccess: Connected,
								onFailure: ConnectionFailed,
								keepAliveInterval: 10,
								useSSL: true,
								userName: username,
								password: password	
							}
							if (location.protocol == 'http:') {options.useSSL = false}

							mqttClient.connect(options);

							/*Callback for successful MQTT connection */
							function Connected() {
								console.log("Connected");
								
								if (wasConnected) {
										toastr.success('Comunicación con el servidor recuperada.', 'Éxito!');
								}
								wasConnected = true;
								isConnected = true;
								
								mqttClient.subscribe(SubTopic);
							}

							/*Callback for failed connection*/
							function ConnectionFailed(res) {
								console.log("Connect failed:" + res.errorMessage);
							}

							/*Callback for lost connection*/
							function ConnectionLost(res) {
								if (res.errorCode != 0) {
									toastr.error('Se ha perdido la comunicacion con el servidor. Intentando reconectar...', 'Error!');
									isConnected = false;
									setTimeout (connect(), 5000);
								}
							}

							/*Callback for incoming message processing */
							function MessageArrived(message) {
								try {
									var json = JSON.parse(message.payloadString);
									console.log(json);
									//DeviceDataProcess(json);
								} catch (e) {
									console.log(e);
									console.log('Invalid JSON: ', message.data);
									return;
								}
							}
							
						} else {
							toastr.error('Lo sentimos, pero su navegador no es compatible con nuestros sitio web.', 'Error!');
						}
					} else {
						toastr.error('Lo sentimos, No hemos podido autenticar con el servidor. Intentando reconectar...', 'Error!');
						setTimeout ('connect()', 5000);
					}
				});
			} catch (error) {
				console.log(error);
			}
		}
		connect();

		(function () {

			//

			let view = document.getElementById("<%= viewName %>");
			view.addEventListener("OnVisible", function () {
				//viewport visible
			});
			view.addEventListener("OnInvisible", function () {
				//viewport invisible
			});

		})();
	</script>
</div>